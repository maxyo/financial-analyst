# Infrastructure-only docker-compose for the project
# Includes Redis and PostgreSQL for local development.

services:
  redis:
    image: redis:7-alpine
    container_name: trade-redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - trade-net

  postgres:
    image: postgres:16-alpine
    container_name: trade-postgres
    environment:
      POSTGRES_DB: trade
      POSTGRES_USER: trade
      POSTGRES_PASSWORD: trade
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - trade-net

# Named volumes for data persistence
volumes:
  redis-data:
  postgres-data:

# Dedicated network to isolate project services
networks:
  trade-net:
    driver: bridge

# Usage:
#  - Start infra:    docker compose up -d
#  - Stop infra:     docker compose down
#  - Purge data:     docker volume rm $(docker volume ls -q | grep -E "redis-data|postgres-data")
# Backend config (optional):
#  - Redis (in-network): REDIS_URL=redis://redis:6379; from host: REDIS_URL=redis://localhost:6379
#  - Postgres (in-network): DATABASE_URL=postgres://trade:trade@postgres:5432/trade; from host: DATABASE_URL=postgres://trade:trade@localhost:5432/trade
#  - Current backend defaults to SQLite via better-sqlite3. Switch to Postgres only if/when backend supports it or for external tools.
